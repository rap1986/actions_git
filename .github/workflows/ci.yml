name: CI - Snapshot
run-name: CI ${{ github.ref_name }} disparada por ${{ github.actor }}

on:
  workflow_call:
    inputs:
      tipo_versao:
        type: string
        description: Versão do artefato (patch, minor, major, snapshot)
      node_versao:
        type: string
        description: Versão do node
      node_compilar_pastas:
        type: string
        description: Pastas do projeto node
      node_artefatos:
        type: string
        description: Arquivos/Artefatos da versão final
      SONAR_TOKEN:
        type: string

permissions:
  contents: write

jobs:
  PreparaOBuild:
    runs-on: ubuntu-latest
    permissions: read-all
    outputs:
      node_compilar_pastas_mt: ${{ steps.node-pasta-matrix.outputs.pastas_mt }}
    steps:
      - name: Valida versão
        if: ${{ (inputs.tipo_versao != 'snapshot') && (github.ref_name != 'main') }}
        run: |
          echo "Somente a branch main pode gerar uma versão"
          exit 1
      - name: Converter node pastas para matrix
        id: node-pasta-matrix
        shell: bash
        run: |
          pastas="${{ inputs.node_compilar_pastas }}"
          pastas_mt=$(echo "$pastas" | jq -R -c 'split(";")')
          echo "pastas_mt=$pastas_mt"
          echo "pastas_mt=$pastas_mt" >> $GITHUB_OUTPUT

  GerarVersao:
    runs-on: ubuntu-latest
    permissions: read-all
    outputs:
      versao: ${{ steps.versao.outputs.versao }}
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build

      - name: Baixando o repositório com os scripts
        uses: actions/checkout@v4
        with:
          repository: rap1986/actions_git
          path: scripts

      - name: Lista os arquivos para conferência
        run: |
          ls ${{ github.workspace }}
          ls ${{ github.workspace }}/scripts

      - name: Coleta a próxima versão
        id: versao
        uses: ./scripts/.github/actions/proxima_versao
        with:
          tipo_versao: ${{ inputs.tipo_versao }}
          token: ${{ secrets.GITHUB_TOKEN }}

  Testar:
    runs-on: ubuntu-latest
    permissions: read-all
    needs: [PreparaOBuild, GerarVersao]
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build

      - name: Baixando o repositório com os scripts
        uses: actions/checkout@v4
        with:
          repository: rap1986/actions_git
          path: scripts

      - name: Testa o(s) projeto(s)
        uses: ./scripts/.github/actions/testar
        with:
          node_versao: ${{ inputs.node_versao }}
          node_compilar_pastas: ${{ inputs.node_compilar_pastas }}

  SonarQube:
    runs-on: ubuntu-latest
    permissions: read-all
    needs: [PreparaOBuild, Testar]
    strategy:
      matrix:
        pasta: ${{ fromJSON(needs.PreparaOBuild.outputs.node_compilar_pastas_mt) }}
      fail-fast: false
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build
          fetch-depth: 0 

      - name: Baixando o repositório com os scripts
        uses: actions/checkout@v4
        with:
          repository: rap1986/actions_git
          path: scripts

      - name: SonarQube
        uses: ./scripts/.github/actions/externo/sonar
        with:
          pasta: build/${{ matrix.pasta }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Compilar:
    runs-on: ubuntu-latest
    name: Build ${{ needs.GerarVersao.outputs.versao }}
    permissions: write-all
    needs: [PreparaOBuild, GerarVersao]
    if: "${{ inputs.node_versao != '' }}"
    steps:
      - name: Baixando o repositório
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: build

      - name: Baixando o repositório com os scripts
        uses: actions/checkout@v4
        with:
          repository: rap1986/actions_git
          path: scripts

      - name: Compila o projeto
        uses: ./scripts/.github/actions/compilar
        with:
          node_versao: ${{ inputs.node_versao }}
          node_compilar_pastas: ${{ inputs.node_compilar_pastas }}

      - name: Subir artefato
        uses: ./scripts/.github/actions/subir_artefato
        with:
          node_artefatos: ${{ inputs.node_artefatos }}
          versao: ${{ needs.GerarVersao.outputs.versao }}
          token: ${{ secrets.GITHUB_TOKEN }}

  CrarReleaseTag:
    runs-on: ubuntu-latest
    name: Release ${{ needs.GerarVersao.outputs.versao }}
    permissions: write-all
    needs: [GerarVersao, Testar, Compilar]
    steps:
      - name: Baixando o repositório com os scripts
        uses: actions/checkout@v4
        with:
          repository: rap1986/actions_git
          #token: ${{ secrets.PIPELINE_TOKEN }}
          path: scripts

      - name: Subir artefato
        uses: ./scripts/.github/actions/criar_versao
        with:
          versao: ${{ needs.GerarVersao.outputs.versao }}
          token: ${{ secrets.GITHUB_TOKEN }}
